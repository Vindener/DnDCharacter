import React, { useState,useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Alert,
  BackHandler
} from "react-native";

import AsyncStorage from "@react-native-async-storage/async-storage";

import * as FileSystem from "expo-file-system";
import { shareAsync } from "expo-sharing";

import * as DocumentPicker from 'expo-document-picker';

import Dice from "../Dice";



const CharacterSheetScreen = ({route, navigation  }) => {
 const [characterData, setCharacterData] = useState({
    name: "",
    level: "",
    class: "",
    experience: "",
    health: "",
    armorClass: "",
    strength: "",
    dexterity: "",
    constitution: "",
    intelligence: "",
    wisdom: "",
    charisma: "",
  });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –ø—Ä–∏–π—à–ª–∏ –∑ `route.params`
useEffect(() => {
  if (route.params?.character) {
    setCharacterData(route.params.character);
  }
}, [route.params]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
  useEffect(() => {
  const loadCharacterData = async () => {
    if (characterData.id) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ id
      try {
        const storedData = await AsyncStorage.getItem(`characterData_${characterData.id}`);
        if (storedData) {
          setCharacterData(JSON.parse(storedData));
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
      }
    }
  };
  loadCharacterData();
}, [characterData.id]);


  // –ó–º—ñ–Ω–∞ –¥–∞–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const handleInputChange = (field, value) => {
    const numericFields = [
      "strength",
      "dexterity",
      "constitution",
      "intelligence",
      "wisdom",
      "charisma",
    ];
    setCharacterData((prevData) => ({
      ...prevData,
      [field]: numericFields.includes(field) ? parseInt(value) || 0 : value,
    }));
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
const saveCharacter = async () => {
  if (characterData.id) {
    try {
      await AsyncStorage.setItem(`characterData_${characterData.id}`, JSON.stringify(characterData));
      console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π');
    } catch (error) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", error.message);
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
    }
  } else {
    Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
};

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const intervalId = setInterval(() => {
      saveCharacter();
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(intervalId);
  }, [characterData]);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –Ω–∞–∑–∞–¥
  useEffect(() => {
    const handleBackPress = () => {
      saveCharacter();
      return false; // –î–æ–∑–≤–æ–ª—è—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏—Ö—ñ–¥
    };

    const unsubscribe = navigation.addListener('beforeRemove', saveCharacter);
    BackHandler.addEventListener("hardwareBackPress", handleBackPress);

    return () => {
      unsubscribe(); // –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –ø–æ–¥—ñ–π –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
      BackHandler.removeEventListener("hardwareBackPress", handleBackPress);
    };
  }, [characterData]);



  // useEffect(() => {
  //   if (!character) {
  //     setCurrentCharacter({
  //       id: `${Date.now()}`,
  //       name: "–ù–æ–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
  //       level: 1,
  //       experience: "0/300",
  //       hp: 10,
  //       ac: 10,
  //       speed: 30,
  //       initiative: "+0",
  //       strength: 10,
  //       dexterity: 10,
  //       constitution: 10,
  //       intelligence: 10,
  //       wisdom: 10,
  //       charisma: 10,
  //     });
  //   }
  // }, [character]);





  // const [character, setCharacter] = useState({
  //   name: "–ë–µ–∑—ñ–º–µ–Ω–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
  //   level: 1,
  //   experience: "100/300",
  //   hp: 10,
  //   ac: 10,
  //   speed: 30,
  //   initiative: "+0",
  //   strength: 11,
  //   dexterity: 22,
  //   constitution: 3,
  //   intelligence: 4,
  //   wisdom: 5,
  //   charisma: 10,
  // });

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ AsyncStorage
  const loadCharacter = async () => {
    try {
      const jsonValue = await AsyncStorage.getItem("characterData");
      if (jsonValue != null) {
        setCharacterData(JSON.parse(jsonValue));
        Alert.alert("–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
      } else {
        Alert.alert("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.");
      }
    } catch (e) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ.");
    }
  };

//  —ñ–º–ø–æ—Ä—Ç —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç JSON —ñ–∑ —Ñ–∞–π–ª—É
const exportToFile = async () => {
    try {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö
      const jsonData = JSON.stringify(characterData, null, 2);

      // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      const fileUri = FileSystem.documentDirectory + "character.json";
      await FileSystem.writeAsStringAsync(fileUri, jsonData, { encoding: FileSystem.EncodingType.UTF8 });

      // –ü–æ—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      await shareAsync(fileUri);
    } catch (error) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", `–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª: ${error.message}`);
    }
  };


const importFromFile = async () => {
  try {
    const result = await DocumentPicker.getDocumentAsync({ type: 'application/json' });

    if (result.canceled || !result.assets || !result.assets.length) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ!");
      return;
    }

    const fileUri = result.assets[0].uri;
    const jsonString = await FileSystem.readAsStringAsync(fileUri);
    const jsonData = JSON.parse(jsonString);
    
    setCharacterData(jsonData);
    Alert.alert("–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!");
  } catch (e) {
    Alert.alert("–ü–æ–º–∏–ª–∫–∞", `–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª: ${e.message}`);
  }
};

const rollD20WithModifier = (mod) => {
  const rollResult = Math.floor(Math.random() * 20) + 1 + mod;
   Alert.alert('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏–¥–∫–∞',`–í–∏–ø–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${rollResult- mod} + ${mod}(–º–æ–¥.) = ${rollResult}`);
};


console.log("characterData:", characterData);


  return (
    <View style={styles.container}>
      {/* –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫ */}
      <View style={styles.header}>
        <Text style={styles.characterName}>{characterData.name}</Text>
        <Text style={styles.level}>–†—ñ–≤–µ–Ω—å {characterData.level}</Text>
        <Text style={styles.exp}>{characterData.experience}</Text>
        
        <TouchableOpacity style={styles.button} onPress={saveCharacter}>
    <Text style={styles.buttonText}>–ó–±–µ—Ä–µ–≥—Ç–∏</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={loadCharacter}>
    <Text style={styles.buttonText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={importFromFile}>
    <Text style={styles.buttonText}>–Ü–º–ø–æ—Ä—Ç JSON</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={exportToFile}>
    <Text style={styles.buttonText}>–µ–∫—Å–ø–æ—Ä JSON</Text>
  </TouchableOpacity>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑—ñ —Å–∫—Ä–æ–ª–æ–º */}
      <ScrollView contentContainerStyle={styles.content}>
        <View style={styles.statsRow}>
         {[
  { key: "speed", label: "üèÉ –®–≤–∏–¥–∫—ñ—Å—Ç—å" },
  { key: "ac", label: "üõ° –ó–∞—Ö–∏—Å—Ç" },
  { key: "hp", label: "‚ù§Ô∏è HP" },
  { key: "initiative", label: "‚ö° –Ü–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∞" },
].map((stat) => (
  <View key={stat.key} style={styles.statBox}>
    <Text style={styles.statLabel}>{stat.label}</Text>
    <TextInput
      style={styles.statInput}
      keyboardType="numeric"
      value={characterData[stat.key]?.toString() ?? ""} // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∞ –Ω–µ –≤–∫–ª–∞–¥–µ–Ω—ñ
      onChangeText={(text) =>
        setCharacterData((prevData) => ({
          ...prevData,
          [stat.key]: parseInt(text) || 0, // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–ª–µ
        }))
      }
    />
  </View>
))}


        </View> 

        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏</Text>
        {[
  { key: "strength", label: "–°–∏–ª–∞" },
  { key: "dexterity", label: "–õ–æ–≤–∫—ñ—Å—Ç—å" },
  { key: "constitution", label: "–¢—ñ–ª–æ–±—É–¥–æ–≤–∞" },
  { key: "intelligence", label: "–Ü–Ω—Ç–µ–ª–µ–∫—Ç" },
  { key: "wisdom", label: "–ú—É–¥—Ä—ñ—Å—Ç—å" },
  { key: "charisma", label: "–•–∞—Ä–∏–∑–º–∞" },
].map((attr) => (
  <View key={attr.key} style={styles.statRow}>
    <Text style={styles.statName}>{attr.label}</Text>
    <TextInput
      style={styles.statInput}
      keyboardType="numeric"
      value={characterData[attr.key]?.toString() ?? ""}
       onChangeText={(text) => {
          let numericValue = parseInt(text) || 0; // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —á–∏—Å–ª–æ
          numericValue = Math.max(1, Math.min(numericValue, 30)); // –û–±–º–µ–∂–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö 1-30
          handleInputChange(attr.key, numericValue.toString());
        }}
    />
    <TouchableOpacity
      style={styles.rollButton}
      onPress={() => rollD20WithModifier(Number(characterData[attr.key] || 0))}
    >
      <Text style={styles.rollButtonText}>üé≤</Text>
    </TouchableOpacity>
  </View>
))}


        </View>
      </ScrollView>

      <Dice />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#222" },
  header: { backgroundColor: "#3A3A3A", padding: 20, alignItems: "center" },
  characterName: { color: "white", fontSize: 20, fontWeight: "bold" },
  level: { color: "#B39DDB", fontSize: 16 },
  exp: { color: "#B0BEC5", fontSize: 14 },
  button: { backgroundColor: "#6200EE", padding: 10, borderRadius: 5, marginVertical: 5 },
  buttonText: { color: "white", fontWeight: "bold" },
  content: { padding: 20 },
  statsRow: { flexDirection: "row", justifyContent: "space-between", flexWrap: "wrap", marginBottom: 10 },
  statBox: { backgroundColor: "#444", padding: 10, borderRadius: 5, margin: 5 },
  statLabel: { color: "white", fontSize: 16 },
  statInput: { backgroundColor: "#555", color: "white", padding: 8, borderRadius: 5, width: 60, textAlign: "center" },
  section: { marginTop: 20 },
  sectionTitle: { color: "#B39DDB", fontSize: 18, marginBottom: 10 },
  statRow: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
  statName: { color: "white", fontSize: 16, flex: 1 }
});

export default CharacterSheetScreen;
