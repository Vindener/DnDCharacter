import React, { useState,useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Modal,
  Alert 
} from "react-native";

import AsyncStorage from "@react-native-async-storage/async-storage";

import * as FileSystem from "expo-file-system";
import { shareAsync } from "expo-sharing";

import * as DocumentPicker from 'expo-document-picker';

import Dice from "../Dice";



const CharacterSheetScreen = ({route, navigation  }) => {
  const { character } = route.params; 
  const [characterData, setCharacterData] = useState(character);

  // –î–æ–¥–∞–π –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–∞—Ç—å–∫–∞ —Å—Ç–∞–Ω –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
  const [selectedModifier, setSelectedModifier] = useState(0);
  const [isDiceVisible, setDiceVisible] = useState(false);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Dice –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º
  const handleRollDice = (modifier) => {
    setSelectedModifier(modifier);
    setDiceVisible(true);
  };


  useEffect(() => {
    if (!character) {
      setCurrentCharacter({
        id: `${Date.now()}`,
        name: "–ù–æ–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
        level: 1,
        experience: "0/300",
        hp: 10,
        ac: 10,
        speed: 30,
        initiative: "+0",
        strength: 10,
        dexterity: 10,
        constitution: 10,
        intelligence: 10,
        wisdom: 10,
        charisma: 10,
      });
    }
  }, [character]);

  // const [character, setCharacter] = useState({
  //   name: "–ë–µ–∑—ñ–º–µ–Ω–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
  //   level: 1,
  //   experience: "100/300",
  //   hp: 10,
  //   ac: 10,
  //   speed: 30,
  //   initiative: "+0",
  //   strength: 11,
  //   dexterity: 22,
  //   constitution: 3,
  //   intelligence: 4,
  //   wisdom: 5,
  //   charisma: 10,
  // });
  
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ AsyncStorage
   const handleInputChange = (field, value) => {
    setCharacterData((prevData) => ({ ...prevData, [field]: value }));
  };

   const saveCharacter = async () => {
    try {
      const storedCharacters = await AsyncStorage.getItem("DnD_Characters");
      const characters = storedCharacters ? JSON.parse(storedCharacters) : [];

      const updatedCharacters = characters.map((char) =>
        char.id === characterData.id ? characterData : char
      );

      await AsyncStorage.setItem("DnD_Characters", JSON.stringify(updatedCharacters));
      alert("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
    } catch (e) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", e);
    }
  };

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ AsyncStorage
const loadCharacter = async () => {
  try {
    const jsonValue = await AsyncStorage.getItem("@character_data");
    if (jsonValue != null) {
      setCharacter(JSON.parse(jsonValue));
      Alert.alert("–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
    } else {
      Alert.alert("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.");
    }
  } catch (e) {
    Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ.");
  }
};


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É JSON —ñ–∑ —Ñ–∞–π–ª—É
const exportToFile = async () => {
    try {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö
      const jsonData = JSON.stringify(character, null, 2);

      // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      const fileUri = FileSystem.documentDirectory + "character.json";
      await FileSystem.writeAsStringAsync(fileUri, jsonData, { encoding: FileSystem.EncodingType.UTF8 });

      // –ü–æ—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
      await shareAsync(fileUri);
    } catch (error) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", `–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª: ${error.message}`);
    }
  };


const importFromFile = async () => {
  try {
    const result = await DocumentPicker.getDocumentAsync({ type: 'application/json' });

    if (result.canceled || !result.assets || !result.assets.length) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ!");
      return;
    }

    const fileUri = result.assets[0].uri;
    const jsonString = await FileSystem.readAsStringAsync(fileUri);
    const jsonData = JSON.parse(jsonString);
    
    setCharacter(jsonData);
    Alert.alert("–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!");
  } catch (e) {
    Alert.alert("–ü–æ–º–∏–ª–∫–∞", `–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª: ${e.message}`);
  }
};

const rollD20WithModifier = (mod) => {
  const rollResult = Math.floor(Math.random() * 20) + 1 + mod;
   Alert.alert('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏–¥–∫–∞',`–í–∏–ø–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${rollResult- mod} + ${mod}(–º–æ–¥.) = ${rollResult}`);
};




  return (
    <View style={styles.container}>
      {/* –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –≤–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫ */}
      <View style={styles.header}>
        <Text style={styles.characterName}>{character.name}</Text>
        <Text style={styles.level}>–†—ñ–≤–µ–Ω—å {character.level}</Text>
        <Text style={styles.exp}>{character.experience}</Text>
        
        <TouchableOpacity style={styles.button} onPress={saveCharacter}>
    <Text style={styles.buttonText}>–ó–±–µ—Ä–µ–≥—Ç–∏</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={loadCharacter}>
    <Text style={styles.buttonText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={importFromFile}>
    <Text style={styles.buttonText}>–Ü–º–ø–æ—Ä—Ç JSON</Text>
  </TouchableOpacity>
  <TouchableOpacity style={styles.button} onPress={exportToFile}>
    <Text style={styles.buttonText}>–µ–∫—Å–ø–æ—Ä JSON</Text>
  </TouchableOpacity>
      </View>

      {/* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑—ñ —Å–∫—Ä–æ–ª–æ–º */}
      <ScrollView contentContainerStyle={styles.content}>
        <View style={styles.statsRow}>
          {[
            { key: "speed", label: "üèÉ –®–≤–∏–¥–∫—ñ—Å—Ç—å" },
            { key: "ac", label: "üõ° –ó–∞—Ö–∏—Å—Ç" },
            { key: "hp", label: "‚ù§Ô∏è HP" },
            { key: "initiative", label: "‚ö° –Ü–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∞" },
          ].map((stat) => (
            <View key={stat.key} style={styles.statBox}>
              <Text style={styles.statLabel}>{stat.label}</Text>
              <TextInput
                style={styles.statInput}
                keyboardType="numeric"
                value={character[stat.key]}
                onChangeText={(text) => setCharacter({ ...character, [stat.key]: text })}
              />
            </View>
          ))}
        </View> 

        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞ –Ω–∞–≤–∏—á–∫–∏</Text>
        {[
          { key: "strength", label: "–°–∏–ª–∞" },
          { key: "dexterity", label: "–õ–æ–≤–∫—ñ—Å—Ç—å" },
          { key: "constitution", label: "–¢—ñ–ª–æ–±—É–¥–æ–≤–∞" },
          { key: "intelligence", label: "–Ü–Ω—Ç–µ–ª–µ–∫—Ç" },
          { key: "wisdom", label: "–ú—É–¥—Ä—ñ—Å—Ç—å" },
          { key: "charisma", label: "–•–∞—Ä–∏–∑–º–∞" },
        ].map((attr) => (
          <View key={attr.key} style={styles.statRow}>
            <Text style={styles.statName}>{attr.label}</Text>
            <TextInput
              style={styles.statInput}
              keyboardType="numeric"
              value={character[attr.key]}
              onChangeText={(text) =>
                setCharacter({ ...character, [attr.key]: text })
              }
            />
           <TouchableOpacity
            style={styles.rollButton}
            onPress={() => rollD20WithModifier(2)}
          >
            <Text style={styles.rollButtonText}>üé≤</Text>
          </TouchableOpacity>


          </View>
        ))}
        {isDiceVisible && <Dice modifier={selectedModifier} />}
        </View>
      </ScrollView>

      <Dice />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#222" },
  header: { backgroundColor: "#3A3A3A", padding: 20, alignItems: "center" },
  characterName: { color: "white", fontSize: 20, fontWeight: "bold" },
  level: { color: "#B39DDB", fontSize: 16 },
  exp: { color: "#B0BEC5", fontSize: 14 },
  button: { backgroundColor: "#6200EE", padding: 10, borderRadius: 5, marginVertical: 5 },
  buttonText: { color: "white", fontWeight: "bold" },
  content: { padding: 20 },
  statsRow: { flexDirection: "row", justifyContent: "space-between", flexWrap: "wrap", marginBottom: 10 },
  statBox: { backgroundColor: "#444", padding: 10, borderRadius: 5, margin: 5 },
  statLabel: { color: "white", fontSize: 16 },
  statInput: { backgroundColor: "#555", color: "white", padding: 8, borderRadius: 5, width: 60, textAlign: "center" },
  section: { marginTop: 20 },
  sectionTitle: { color: "#B39DDB", fontSize: 18, marginBottom: 10 },
  statRow: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
  statName: { color: "white", fontSize: 16, flex: 1 }
});

export default CharacterSheetScreen;
